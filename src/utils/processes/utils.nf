nextflow.preview.dsl=2

import java.nio.file.Paths

binDir = !params.containsKey("test") ? "${workflow.projectDir}/src/utils/bin" : Paths.get(workflow.scriptFile.getParent().getParent().toString(), "utils/bin")

def isParamNull(param) {
    return param == null || param == "NULL"
}

def clean(params) {
   return params.findAll { !it.key.contains('-') }
}

def detectCellRangerVersionData = { cellRangerV2Data, cellRangerV3Data ->
    if(cellRangerV2Data.isDirectory() || cellRangerV3Data.isDirectory()) {
        if(cellRangerV2Data.exists()) {
            // Sanity checks
            if(new File(Paths.get(cellRangerV2Data.toString(), "genes.tsv.gz").toString()).exists())
                throw new Exception("Found genes.tsv.gz but expecting genes.tsv. The gene file should be uncompressed.")
            if(new File(Paths.get(cellRangerV2Data.toString(), "genes.tsv").toString()).exists())
                return [
                    version: 2,
                    path: cellRangerV2Data
                ]
            // Extract genome folder if a single one exists
            genomes = cellRangerV2Data.list()
            if(genomes.size() > 1 || genomes.size() == 0)
                throw new Exception("None or multiple genomes detected for the output generated by CellRanger v2. Selecting custom genome is currently not implemented.")
            genomeFilePath = Paths.get(cellRangerV2Data.toString(), genomes[0])
            // Sanity checks
            if(!new File(genomeFilePath).isDirectory())
                throw new Exception("Expecting a genome directory from the output generated by CellRanger v2.")
            if(new File(Paths.get(genomeFilePath.toString(), "genes.tsv.gz").toString()).exists())
                throw new Exception("Found compressed gene file (genes.tsv.gz) but expecting uncompressed gene file (genes.tsv). Use gunzip for instance to uncompress it.")
            if(new File(Paths.get(genomeFilePath.toString(), "barcodes.tsv.gz").toString()).exists())
                throw new Exception("Found compressed gene file (barcodes.tsv.gz) but expecting uncompressed gene file (barcodes.tsv). Use gunzip for instance to uncompress it.")
            if(new File(Paths.get(genomeFilePath.toString(), "matrix.mtx.gz").toString()).exists())
                throw new Exception("Found compressed gene file (matrix.mtx.gz) but expecting uncompressed gene file (matrix.mtx.gz). Use gunzip for instance to uncompress it.")
            if(!new File(Paths.get(genomeFilePath.toString(), "genes.tsv")).exists())
                throw new Exception("Expecting a gene file genes.tsv file but none are found.")
            if(!new File(Paths.get(genomeFilePath.toString(), "barcodes.tsv")).exists())
                throw new Exception("Expecting a barcode file barcodes.tsv file but none are found.")
            if(!new File(Paths.get(genomeFilePath.toString(), "matrix.mtx")).exists())
                throw new Exception("Expecting a matrix file matrix.mtx file but none are found.")
            return [
                version: 2,
                path: file(genomeFilePath)
            ]
        } else if(cellRangerV3Data.exists()) {
            if(!new File(Paths.get(cellRangerV3Data.toString(), "features.tsv")).exists() && !new File(Paths.get(cellRangerV3Data.toString(), "features.tsv.gz")).exists())
                throw new Exception("Expecting either a features.tsv or features.tsv.gz file but none are found.")
            return {
                version: 3
                path: cellRangerV3Data
            }
        } else {
            throw new Exception("Cannot detect the version of the data format of CellRanger.")
        }
    } else {
        if(cellRangerV2Data.exists()) {
            return [
                version: 2,
                path: cellRangerV2Data
            ]
        } else if(cellRangerV3Data.exists()) {
            return [
                version: 3,
                path: cellRangerV3Data
            ]
        } else {
            throw new Exception("Cannot detect the version of the data format of CellRanger.")
        }
    }
}

process SC__FILE_CONVERTER {

    echo false
    cache 'deep'
    if(!params.containsKey("data"))
        container params.sc.scanpy.container
	else if(params.data.containsKey("tenx_atac") && params.data.tenx_atac.containsKey("cellranger_mex"))
        container params.sc.cistopic.container
    else if(params.data.containsKey("seurat_rds"))
		container "vibsinglecellnf/sceasy:0.0.5"
	else
        container params.sc.scanpy.container
    clusterOptions "-l nodes=1:ppn=2 -l pmem=30gb -l walltime=1:00:00 -A ${params.global.qsubaccount}"
    publishDir "${params.global.outdir}/data/intermediate", mode: 'symlink', overwrite: true

    input:
        tuple \
            val(sampleId), \
            path(f), \
            val(inputDataType), \
            val(outputDataType)

    output:
        tuple \
            val(sampleId), \
            path("${sampleId}.SC__FILE_CONVERTER.${outputDataType}")

    script:
        def sampleParams = params.parseConfig(sampleId, params.global, params.sc.file_converter)
        processParams = sampleParams.local

        switch(inputDataType) {
            case "10x_cellranger_mex":
                // Nothing to be done here
            break;
            case "10x_cellranger_mex_outs":
                // Reference: https://kb.10xgenomics.com/hc/en-us/articles/115000794686-How-is-the-MEX-format-used-for-the-gene-barcode-matrices-
                // Check if output was generated with CellRanger v2 or v3
                cellranger_outs_v2_mex = file("${f.toRealPath()}/${processParams.useFilteredMatrix ? "filtered" : "raw"}_gene_bc_matrices/")
                cellranger_outs_v3_mex = file("${f.toRealPath()}/${processParams.useFilteredMatrix ? "filtered" : "raw"}_feature_bc_matrix/")
                cellRangerData = detectCellRangerVersionData(cellranger_outs_v2_mex, cellranger_outs_v3_mex)
                f = cellRangerData.path
                inputDataType = "10x_cellranger_mex"
            break;
            case "10x_cellranger_h5":
                // Nothing to be done here
            break;
            case "10x_cellranger_h5_outs":
                // Check if output was generated with CellRanger v2 or v3
                cellranger_outs_v2_h5 = file("${f.toRealPath()}/${processParams.useFilteredMatrix ? "filtered" : "raw"}_gene_bc_matrices.h5")
                cellranger_outs_v3_h5 = file("${f.toRealPath()}/${processParams.useFilteredMatrix ? "filtered" : "raw"}_feature_bc_matrix.h5")
                cellRangerData = detectCellRangerVersionData(cellranger_outs_v2_h5, cellranger_outs_v3_h5)
                f = cellRangerData.path
                inputDataType = "10x_cellranger_h5"
            case "10x_atac_cellranger_mex_outs":
                // Nothing to be done here
            break;
            case "csv":
                // Nothing to be done here
            break;

            case "tsv":
                // Nothing to be done here
            break;

            case "h5ad":
                // Nothing to be done here
            break;

            case "seurat_rds":
                // Nothing to be done here
            break;
            
            default:
                throw new Exception("The given input format ${inputDataType} is not recognized.")
            break;
        }

        if(inputDataType == "10x_atac_cellranger_mex_outs" && outputDataType == "cistopic_rds")
            """
            ${binDir}/create_cistopic_object.R \
                --tenx_path ${f} \
                --sampleId ${sampleId} \
                --output ${sampleId}.SC__FILE_CONVERTER.${outputDataType}
            """
        else if(inputDataType.toLowerCase().contains("rds"))
			"""
			${binDir}/sc_file_converter.R \
                --sample-id "${sampleId}" \
                ${(processParams.containsKey('tagCellWithSampleId')) ? '--tag-cell-with-sample-id '+ processParams.tagCellWithSampleId : ''} \
                ${(processParams.containsKey('seuratAssay')) ? '--seurat-assay '+ processParams.seuratAssay : ''} \
                ${(processParams.containsKey('seuratMainLayer')) ? '--seurat-main-assay '+ processParams.seuratMainLayer : ''} \
                --input-format $inputDataType \
                --output-format $outputDataType \
                --input-file ${f} \
                --output-file "${sampleId}.SC__FILE_CONVERTER.${outputDataType}"
			"""
		else
            """
            ${binDir}/sc_file_converter.py \
                --sample-id "${sampleId}" \
                ${(processParams.containsKey('makeVarIndexUnique')) ? '--make-var-index-unique '+ processParams.makeVarIndexUnique : ''} \
                ${(processParams.containsKey('tagCellWithSampleId')) ? '--tag-cell-with-sample-id '+ processParams.tagCellWithSampleId : ''} \
                --input-format $inputDataType \
                --output-format $outputDataType \
                ${f} \
                "${sampleId}.SC__FILE_CONVERTER.${outputDataType}"
            """

}

process SC__FILE_CONVERTER_HELP {

    container params.sc.scanpy.container

    output:
        stdout()

    script:
        """
        ${binDir}/sc_file_converter.py -h | awk '/-h/{y=1;next}y'
        """

}

process SC__FILE_CONCATENATOR {

    cache 'deep'
    container params.sc.scanpy.container
    clusterOptions "-l nodes=1:ppn=2 -l pmem=30gb -l walltime=1:00:00 -A ${params.global.qsubaccount}"
    publishDir "${params.global.outdir}/data/intermediate", mode: 'symlink', overwrite: true

    input:
        file("*")

    output:
        tuple val(params.global.project_name), path("${params.global.project_name}.SC__FILE_CONCATENATOR.${processParams.off}")

    script:
        processParams = params.sc.file_concatenator
        """
        ${binDir}/sc_file_concatenator.py \
            --file-format $processParams.off \
            ${(processParams.containsKey('join')) ? '--join ' + processParams.join : ''} \
            --output "${params.global.project_name}.SC__FILE_CONCATENATOR.${processParams.off}" *
        """

}

process SC__STAR_CONCATENATOR() {

    container params.sc.scanpy.container
    clusterOptions "-l nodes=1:ppn=2 -l pmem=30gb -l walltime=1:00:00 -A ${params.global.qsubaccount}"
    publishDir "${params.global.outdir}/data/intermediate", mode: 'symlink', overwrite: true

    input:
        tuple val(sampleId), path(f)

    output:
        tuple val(sampleId), path("${params.global.project_name}.SC__STAR_CONCATENATOR.${processParams.off}")

    script:
        def sampleParams = params.parseConfig(sampleId, params.global, params.sc.star_concatenator)
        processParams = sampleParams.local
        id = params.global.project_name
        """
        ${binDir}/sc_star_concatenator.py \
            --stranded ${processParams.stranded} \
            --output "${params.global.project_name}.SC__STAR_CONCATENATOR.${processParams.off}" $f
        """

}

process SC__PUBLISH_H5AD {

    clusterOptions "-l nodes=1:ppn=2 -l pmem=30gb -l walltime=1:00:00 -A ${params.global.qsubaccount}"
    publishDir "${params.global.outdir}/data", mode: 'link', overwrite: true, saveAs: { filename -> "${tag}.${fOutSuffix}.h5ad" }
    

    input:
        tuple \
            val(tag), \
            path(f), \
            val(stashedParams)
        val(fOutSuffix)

    output:
        tuple \
            val(tag), \
            path("${tag}.${fOutSuffix}.h5ad"), \
            val(stashedParams)

    script:
        """
        ln $f "${tag}.${fOutSuffix}.h5ad"
        """

}

process COMPRESS_HDF5() {

	container "vibsinglecellnf/hdf5:1.10.5-r2"
	clusterOptions "-l nodes=1:ppn=2 -l pmem=30gb -l walltime=1:00:00 -A ${params.global.qsubaccount}"
	publishDir "${params.global.outdir}/data/intermediate", mode: 'symlink', overwrite: true

	input:
		tuple val(id), path(f)

	output:
		tuple val(id), path("${id}.COMPRESS_HDF5.${f.extension}")

	shell:
		"""
		GZIP_COMPRESSION_LEVEL=6
		h5repack \
		   -v \
		   -f GZIP=\${GZIP_COMPRESSION_LEVEL} \
		   $f \
		   "${id}.COMPRESS_HDF5.${f.extension}"
		"""

}
